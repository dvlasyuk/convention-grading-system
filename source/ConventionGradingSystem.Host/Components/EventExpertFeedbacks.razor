@page "/events/{eventId}/expert-feedbacks"

@using ConventionGradingSystem.DataAccess.Configuration
@using ConventionGradingSystem.DataAccess.Database
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using MudBlazor

@inject IOptions<ApplicationConfiguration> Configuration
@inject DatabaseContext DatabaseContext

@if (_contestEvent == null)
{
    <PageTitle>Отзывы экспертов о неизвестном мероприятии</PageTitle>
    <MudAlert Severity="Severity.Warning">
        Мероприятие с идентификатором <em>@EventId</em> <strong>не найдено</strong>. Если ты вводил адрес
        страницы в адресную строку браузера вручную или вставлял скопированную ссылку, то проверь не ошибся
        ли ты при вводе или копировании. Если ты переходил по прямой ссылке, то проверь корректность этой
        ссылки или попроси сделать это того, кто её тебе предоставил. Если ты попал сюда с другой страницы
        системы, то это ошибка - обратись, пожалуйста, к разработчикам
    </MudAlert>
    return;
}

<PageTitle>Отзывы экспертов о мероприятии @_contestEvent.EventName</PageTitle>
@if (!_contestEvent.IsGraded)
{
    <MudAlert Severity="Severity.Warning">
        Мероприятия конкурса <strong>@_contestEvent.ContestName</strong> не оцениваются экспертами. Если
        ты вводил адрес страницы в адресную строку браузера вручную или вставлял скопированную ссылку, то
        проверь не ошибся ли ты при вводе или копировании. Если ты переходил по прямой ссылке, то проверь
        корректность этой ссылки или попроси сделать это того, кто её тебе предоставил. Если ты попал сюда
        с другой страницы системы, то это ошибка - обратись, пожалуйста, к разработчикам
    </MudAlert>
    return;
}

<MudExpansionPanels Class="mb-3">
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Info" />
                <MudText Color="Color.Primary" Class="ml-3">Мероприятие <strong>@_contestEvent.EventName</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudText>Название конкурса мероприятий: <strong>@_contestEvent.ContestName</strong></MudText>
            <MudText>Число отзывов, оставленных экспертами: <strong>@_contestEvent.FeedbacksQuantity</strong></MudText>

            @foreach (var criterion in _contestEvent.GradeCriterions)
            {
                <MudText>Оценка по критерию <em>@criterion.Name</em>: <strong>@criterion.TotalGrade.ToString("0.0")</strong></MudText>
            }

            <MudDivider Class="mt-3" />
            <MudButton Href="@($"/forms/expert-feedback/{EventId}")"
                       Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.QrCode"
                       Class="mt-3">
                Форма эксперта
            </MudButton>

        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudTable Items="@_feedbacks"
          Filter="FilterRecords"
          Breakpoint="Breakpoint.None"
          Hover="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Отзывы экспертов</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchFilter"
                      MaxLength="50"
                      Clearable="true"
                      Placeholder="Поиск"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh><MudTableSortLabel T="Feedback" SortBy="SelectNameField">Имя эксперта</MudTableSortLabel></MudTh>

        @for (var number = 0; number < _contestEvent.GradeCriterions.Count; number++)
        {
            var index = number;
            <MudTh>
                <MudTableSortLabel T="Feedback" SortBy="item => SelectGradeField(item, _contestEvent.GradeCriterions[index].Identifier)">
                    <MudTooltip Text="@_contestEvent.GradeCriterions[index].Name">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" />
                            <MudText Class="ml-1">@(index + 1)</MudText>
                        </div>
                    </MudTooltip>
                </MudTableSortLabel>
            </MudTh>
        }

        <MudTh>Дополнительный комментарий</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.Number</MudTd>
        <MudTd>@context.ExpertName</MudTd>

        @for (var number = 0; number < _contestEvent.GradeCriterions.Count; number++)
        {
            var index = number;
            <MudTd>@context.Grades[_contestEvent.GradeCriterions[index].Identifier]</MudTd>
        }

        <MudTd>@context.Note</MudTd>
    </RowTemplate>

    <NoRecordsContent>
        <MudAlert Severity="Severity.Info">
            О мероприятии <strong>@_contestEvent.EventName</strong> экспертами не было оставлено ни одного отзыва
        </MudAlert>
    </NoRecordsContent>
</MudTable>

@code {

    private ContestEvent? _contestEvent = null;
    private IEnumerable<Feedback> _feedbacks = new List<Feedback>();
    private string? _searchFilter;

    /// <summary>
    /// Идентификатор мероприятия в рамках конкурса.
    /// </summary>
    [Parameter]
    public string? EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var contestEvent = Configuration.Value.Contests
            .SelectMany(item => item.Events)
            .FirstOrDefault(item => item.Identifier == EventId);

        if (contestEvent == null)
        {
            return;
        }

        var feedbacks = await DatabaseContext.ExpertFeedbacks
            .Where(item => item.EventId == EventId)
            .Include(item => item.Grades)
            .ToListAsync();

        var contest = Configuration.Value.Contests.First(item => item.Events.Contains(contestEvent));
        _contestEvent = new ContestEvent(
            EventName: contestEvent.Name,
            ContestName: contest.Name,
            IsGraded: contest.ExpertCriterions.Count > 0,
            FeedbacksQuantity: feedbacks.Count(),
            GradeCriterions: contest.ExpertCriterions
                .Select(criterion => new GradeCriterion(
                    Identifier: criterion.Identifier,
                    Name: criterion.Name,
                    TotalGrade: feedbacks.Count == 0 ? (float)0 :
                        feedbacks
                            .SelectMany(feedback => feedback.Grades)
                            .Where(grade => grade.CriterionId == criterion.Identifier)
                            .Sum(grade => grade.GradeValue) /
                        (float)feedbacks.Count))
                .ToList());

        var experts = Configuration.Value.Experts.ToDictionary(item => item.Identifier);
        _feedbacks = feedbacks
            .OrderBy(feedback => feedback.Identifier)
            .Select((feedback, index) => new Feedback(
                Number: index + 1,
                ExpertName: experts[feedback.ExpertId].Name,
                Grades: feedback.Grades.ToDictionary(
                    grade => grade.CriterionId,
                    grade => grade.GradeValue),
                Note: feedback.Note))
            .ToList();
    }

    private bool FilterRecords(Feedback feedback)
    {
        return string.IsNullOrWhiteSpace(_searchFilter) ||
            feedback.ExpertName.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase) ||
            (feedback.Note?.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private object SelectNameField(Feedback feedback) => feedback.ExpertName;
    private object SelectGradeField(Feedback feedback, string gradeId) => feedback.Grades[gradeId];

    private record ContestEvent(
        string EventName,
        string ContestName,
        bool IsGraded,
        int FeedbacksQuantity,
        IReadOnlyList<GradeCriterion> GradeCriterions);

    private record GradeCriterion(
        string Identifier,
        string Name,
        float TotalGrade);

    private record Feedback(
        int Number,
        string ExpertName,
        IReadOnlyDictionary<string, int> Grades,
        string? Note);
}
