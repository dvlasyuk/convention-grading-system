@page "/forms/expert-feedback/{eventId}"
@layout BaseLayout

@using ConventionGradingSystem.Host.Components.Shared
@using ConventionGradingSystem.DataAccess.Configuration
@using ConventionGradingSystem.DataAccess.Database
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options
@using MudBlazor

@inject IOptions<ApplicationConfiguration> Configuration
@inject DatabaseContext DatabaseContext
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage LocalStorage

<AuthorizeView Roles="Administrator,Expert">
    <NotAuthorized>
        <PageTitle>Вход в систему</PageTitle>
        <SignInForm />
    </NotAuthorized>
    <Authorized>

        @if (_eventDetails == null)
        {
            <PageTitle>Форма отзыва о неизвестном мероприятии</PageTitle>
            <MudAlert Severity="Severity.Warning">
                Мероприятие с идентификатором <em>@EventId</em> <strong>не найдено</strong>. Если ты вводил адрес
                страницы в адресную строку браузера вручную или вставлял скопированную ссылку, то проверь не ошибся
                ли ты при вводе или копировании. Если ты переходил по прямой ссылке, то проверь корректность этой
                ссылки или попроси сделать это того, кто её тебе предоставил. Если ты попал сюда с другой страницы
                системы, то это ошибка - обратись, пожалуйста, к разработчикам
            </MudAlert>
            return;
        }

        <PageTitle>Форма отзыва о мероприятии @_eventDetails.EventName</PageTitle>

        @if (!_eventDetails.IsGraded)
        {
            <MudAlert Severity="Severity.Warning">
                Мероприятия конкурса <strong>@_eventDetails.ContestName</strong> не оцениваются экспертами. Если
                ты вводил адрес страницы в адресную строку браузера вручную или вставлял скопированную ссылку, то
                проверь не ошибся ли ты при вводе или копировании. Если ты переходил по прямой ссылке, то проверь
                корректность этой ссылки или попроси сделать это того, кто её тебе предоставил. Если ты попал сюда
                с другой страницы системы, то это ошибка - обратись, пожалуйста, к разработчикам
            </MudAlert>
            return;
        }

        @if (_isFormDisabled)
        {
            <MudAlert Severity="Severity.Info">
                Твой отзыв о мероприятии <strong>@_eventDetails.EventName</strong> в рамка конкурса мероприятий
                <strong>@_eventDetails.ContestName</strong> принят. Спасибо большое за участие!
            </MudAlert>
            return;
        }

        <MudAlert Severity="Severity.Info">
            Приветствуем тебя, эксперт! Ты можешь свой отзыв о мероприятии <strong>@_eventDetails.EventName</strong>
            в рамка конкурса мероприятий <strong>@_eventDetails.ContestName</strong>. Оцени мероприятие по приведённым
            критериям, оставь дополнительный комментарий, если хочешь, и нажми кнопку <em>Отправить</em>
        </MudAlert>

        <MudPaper Class="mt-3 pa-3">
            <MudForm @ref="_formSelector" @bind-IsValid="@_isFormValid">

                <MudAutocomplete T="Expert"
                                 @bind-Value="_selectedExpert"
                                 SearchFunc="@SearchExpert"
                                 Required="true"
                                 ResetValueOnEmptyText="true"
                                 Label="Выбери себя"
                                 RequiredError="Выбор эксперта обязателен"
                                 Variant="Variant.Outlined"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 Class="my-3" />

                @foreach (var criterion in _eventDetails.Criterions)
                {
                    <MudPaper Outlined="true" Class="mt-3 pa-3">
                        <MudText Typo="Typo.subtitle1">@criterion.Name</MudText>
                        <MudText Typo="Typo.subtitle2">@criterion.Description</MudText>
                        <MudSlider @bind-Value="@_selectedGrades[criterion.Identifier]"
                                   Min="@criterion.MinimalGrade"
                                   Max="@criterion.MaximalGrade"
                                   TickMarks="true"
                                   TickMarkLabels="@GetSliderLabels(criterion)"
                                   ValueLabel="true"
                                   Variant="Variant.Outlined"
                                   Class="mt-3 mb-5" />
                    </MudPaper>
                }

                <MudTextField T="string"
                              @bind-Value="_enteredNote"
                              Label="Оставь любой дополнительный комментарий"
                              Variant="Variant.Outlined"
                              Lines="3"
                              Class="my-3" />

                <MudDivider />
                <MudButton OnClick="ProcessForm"
                           Disabled="@(!_isFormValid)"
                           Variant="Variant.Outlined"
                           Size="Size.Large"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Send"
                           Class="mt-3">
                    Проголосовать
                </MudButton>
            </MudForm>
        </MudPaper>

    </Authorized>
</AuthorizeView>

@code {

    private EventDetails? _eventDetails = null;
    private bool _isFormDisabled = false;
    private bool _isFormValid = false;

    private Expert? _selectedExpert = null;
    private Dictionary<string, int> _selectedGrades = new Dictionary<string, int>();
    private string? _enteredNote = null;

    private MudForm? _formSelector;

    /// <summary>
    /// Идентификатор мероприятия в рамках конкурса.
    /// </summary>
    [Parameter]
    public string? EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var contestEvent = Configuration.Value.Contests
            .SelectMany(@event => @event.Events)
            .FirstOrDefault(@event => @event.Identifier == EventId);

        if (contestEvent == null)
        {
            return;
        }

        var result = await LocalStorage.GetAsync<string>(GetLocalStorageKey());
        _isFormDisabled = result.Success;

        var contest = Configuration.Value.Contests.First(item => item.Events.Contains(contestEvent));
        _eventDetails = new EventDetails(
            EventName: contestEvent.Name,
            ContestName: contest.Name,
            IsGraded: contest.ExpertCriterions.Count > 0,
            Criterions: contest.ExpertCriterions
                .Select(criterion => new GradeCriterion(
                    Identifier: criterion.Identifier,
                    Name: criterion.Name,
                    Description: criterion.Description,
                    MinimalGrade: criterion.MinimalGrade,
                    MaximalGrade: criterion.MaximalGrade))
                .ToList());

        foreach (var criterion in _eventDetails.Criterions)
        {
            _selectedGrades.Add(criterion.Identifier, criterion.MaximalGrade);
        }
    }

    private async Task ProcessForm()
    {
        await _formSelector!.Validate();
        if (!_isFormValid)
        {
            return;
        }

        var feedback = new DataAccess.Database.Entities.ExpertFeedback
        {
            EventId = EventId!,
            ExpertId = _selectedExpert!.Identifier,
            Note = _enteredNote
        };

        foreach (var criterionId in _selectedGrades.Keys)
        {
            feedback.Grades.Add(new DataAccess.Database.Entities.ExpertGrade
            {
                CriterionId = criterionId,
                GradeValue = _selectedGrades[criterionId]
            });
        }

        DatabaseContext.ExpertFeedbacks.Add(feedback);

        await DatabaseContext.SaveChangesAsync();
        await LocalStorage.SetAsync(GetLocalStorageKey(), DateTime.UtcNow.ToString());

        NavigationManager.NavigateTo($"/forms/expert-feedback/{EventId}", true);
    }

    private Task<IEnumerable<Expert>> SearchExpert(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return Task.FromResult(Enumerable.Empty<Expert>());
        }

        return Task.FromResult<IEnumerable<Expert>>(Configuration.Value.Experts
            .Where(expert => expert.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Select(expert => new Expert(
                Identifier: expert.Identifier,
                Name: expert.Name))
            .ToList());
    }

    private string[] GetSliderLabels(GradeCriterion criterion) => Enumerable
        .Range(criterion.MinimalGrade, criterion.MaximalGrade)
        .Select(label => label.ToString())
        .ToArray();

    private string GetLocalStorageKey() => $"ExpertFeedback-{EventId}";

    private record EventDetails(
        string EventName,
        string ContestName,
        bool IsGraded,
        IReadOnlyList<GradeCriterion> Criterions);

    private record Expert(string Identifier, string Name)
    {
        public override string ToString() => Name;
    }

    private record GradeCriterion(
        string Identifier,
        string Name,
        string Description,
        int MinimalGrade,
        int MaximalGrade);
}
